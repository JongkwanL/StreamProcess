// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: stream_process.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	STTService_StreamingRecognize_FullMethodName = "/streamprocess.STTService/StreamingRecognize"
	STTService_Recognize_FullMethodName          = "/streamprocess.STTService/Recognize"
	STTService_GetCapabilities_FullMethodName    = "/streamprocess.STTService/GetCapabilities"
)

// STTServiceClient is the client API for STTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type STTServiceClient interface {
	// Bidirectional streaming for real-time speech recognition
	StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingRecognizeRequest, StreamingRecognizeResponse], error)
	// Unary call for batch audio processing
	Recognize(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognizeResponse, error)
	// Get available models and languages
	GetCapabilities(ctx context.Context, in *GetCapabilitiesRequest, opts ...grpc.CallOption) (*STTCapabilities, error)
}

type sTTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSTTServiceClient(cc grpc.ClientConnInterface) STTServiceClient {
	return &sTTServiceClient{cc}
}

func (c *sTTServiceClient) StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingRecognizeRequest, StreamingRecognizeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &STTService_ServiceDesc.Streams[0], STTService_StreamingRecognize_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamingRecognizeRequest, StreamingRecognizeResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type STTService_StreamingRecognizeClient = grpc.BidiStreamingClient[StreamingRecognizeRequest, StreamingRecognizeResponse]

func (c *sTTServiceClient) Recognize(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecognizeResponse)
	err := c.cc.Invoke(ctx, STTService_Recognize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sTTServiceClient) GetCapabilities(ctx context.Context, in *GetCapabilitiesRequest, opts ...grpc.CallOption) (*STTCapabilities, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(STTCapabilities)
	err := c.cc.Invoke(ctx, STTService_GetCapabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// STTServiceServer is the server API for STTService service.
// All implementations must embed UnimplementedSTTServiceServer
// for forward compatibility.
type STTServiceServer interface {
	// Bidirectional streaming for real-time speech recognition
	StreamingRecognize(grpc.BidiStreamingServer[StreamingRecognizeRequest, StreamingRecognizeResponse]) error
	// Unary call for batch audio processing
	Recognize(context.Context, *RecognizeRequest) (*RecognizeResponse, error)
	// Get available models and languages
	GetCapabilities(context.Context, *GetCapabilitiesRequest) (*STTCapabilities, error)
	mustEmbedUnimplementedSTTServiceServer()
}

// UnimplementedSTTServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSTTServiceServer struct{}

func (UnimplementedSTTServiceServer) StreamingRecognize(grpc.BidiStreamingServer[StreamingRecognizeRequest, StreamingRecognizeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamingRecognize not implemented")
}
func (UnimplementedSTTServiceServer) Recognize(context.Context, *RecognizeRequest) (*RecognizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recognize not implemented")
}
func (UnimplementedSTTServiceServer) GetCapabilities(context.Context, *GetCapabilitiesRequest) (*STTCapabilities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapabilities not implemented")
}
func (UnimplementedSTTServiceServer) mustEmbedUnimplementedSTTServiceServer() {}
func (UnimplementedSTTServiceServer) testEmbeddedByValue()                    {}

// UnsafeSTTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to STTServiceServer will
// result in compilation errors.
type UnsafeSTTServiceServer interface {
	mustEmbedUnimplementedSTTServiceServer()
}

func RegisterSTTServiceServer(s grpc.ServiceRegistrar, srv STTServiceServer) {
	// If the following call pancis, it indicates UnimplementedSTTServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&STTService_ServiceDesc, srv)
}

func _STTService_StreamingRecognize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(STTServiceServer).StreamingRecognize(&grpc.GenericServerStream[StreamingRecognizeRequest, StreamingRecognizeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type STTService_StreamingRecognizeServer = grpc.BidiStreamingServer[StreamingRecognizeRequest, StreamingRecognizeResponse]

func _STTService_Recognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(STTServiceServer).Recognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: STTService_Recognize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(STTServiceServer).Recognize(ctx, req.(*RecognizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _STTService_GetCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(STTServiceServer).GetCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: STTService_GetCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(STTServiceServer).GetCapabilities(ctx, req.(*GetCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// STTService_ServiceDesc is the grpc.ServiceDesc for STTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var STTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamprocess.STTService",
	HandlerType: (*STTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recognize",
			Handler:    _STTService_Recognize_Handler,
		},
		{
			MethodName: "GetCapabilities",
			Handler:    _STTService_GetCapabilities_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingRecognize",
			Handler:       _STTService_StreamingRecognize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream_process.proto",
}

const (
	OCRService_ProcessDocument_FullMethodName = "/streamprocess.OCRService/ProcessDocument"
	OCRService_BatchProcess_FullMethodName    = "/streamprocess.OCRService/BatchProcess"
	OCRService_GetCapabilities_FullMethodName = "/streamprocess.OCRService/GetCapabilities"
)

// OCRServiceClient is the client API for OCRService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OCRServiceClient interface {
	// Single document processing
	ProcessDocument(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*OCRResponse, error)
	// Batch processing with streaming
	BatchProcess(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DocumentRequest, OCRResponse], error)
	// Get OCR capabilities
	GetCapabilities(ctx context.Context, in *GetCapabilitiesRequest, opts ...grpc.CallOption) (*OCRCapabilities, error)
}

type oCRServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOCRServiceClient(cc grpc.ClientConnInterface) OCRServiceClient {
	return &oCRServiceClient{cc}
}

func (c *oCRServiceClient) ProcessDocument(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*OCRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OCRResponse)
	err := c.cc.Invoke(ctx, OCRService_ProcessDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCRServiceClient) BatchProcess(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DocumentRequest, OCRResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OCRService_ServiceDesc.Streams[0], OCRService_BatchProcess_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DocumentRequest, OCRResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OCRService_BatchProcessClient = grpc.BidiStreamingClient[DocumentRequest, OCRResponse]

func (c *oCRServiceClient) GetCapabilities(ctx context.Context, in *GetCapabilitiesRequest, opts ...grpc.CallOption) (*OCRCapabilities, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OCRCapabilities)
	err := c.cc.Invoke(ctx, OCRService_GetCapabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OCRServiceServer is the server API for OCRService service.
// All implementations must embed UnimplementedOCRServiceServer
// for forward compatibility.
type OCRServiceServer interface {
	// Single document processing
	ProcessDocument(context.Context, *DocumentRequest) (*OCRResponse, error)
	// Batch processing with streaming
	BatchProcess(grpc.BidiStreamingServer[DocumentRequest, OCRResponse]) error
	// Get OCR capabilities
	GetCapabilities(context.Context, *GetCapabilitiesRequest) (*OCRCapabilities, error)
	mustEmbedUnimplementedOCRServiceServer()
}

// UnimplementedOCRServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOCRServiceServer struct{}

func (UnimplementedOCRServiceServer) ProcessDocument(context.Context, *DocumentRequest) (*OCRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessDocument not implemented")
}
func (UnimplementedOCRServiceServer) BatchProcess(grpc.BidiStreamingServer[DocumentRequest, OCRResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BatchProcess not implemented")
}
func (UnimplementedOCRServiceServer) GetCapabilities(context.Context, *GetCapabilitiesRequest) (*OCRCapabilities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapabilities not implemented")
}
func (UnimplementedOCRServiceServer) mustEmbedUnimplementedOCRServiceServer() {}
func (UnimplementedOCRServiceServer) testEmbeddedByValue()                    {}

// UnsafeOCRServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OCRServiceServer will
// result in compilation errors.
type UnsafeOCRServiceServer interface {
	mustEmbedUnimplementedOCRServiceServer()
}

func RegisterOCRServiceServer(s grpc.ServiceRegistrar, srv OCRServiceServer) {
	// If the following call pancis, it indicates UnimplementedOCRServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OCRService_ServiceDesc, srv)
}

func _OCRService_ProcessDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCRServiceServer).ProcessDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OCRService_ProcessDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCRServiceServer).ProcessDocument(ctx, req.(*DocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCRService_BatchProcess_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OCRServiceServer).BatchProcess(&grpc.GenericServerStream[DocumentRequest, OCRResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OCRService_BatchProcessServer = grpc.BidiStreamingServer[DocumentRequest, OCRResponse]

func _OCRService_GetCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCRServiceServer).GetCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OCRService_GetCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCRServiceServer).GetCapabilities(ctx, req.(*GetCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OCRService_ServiceDesc is the grpc.ServiceDesc for OCRService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OCRService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamprocess.OCRService",
	HandlerType: (*OCRServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessDocument",
			Handler:    _OCRService_ProcessDocument_Handler,
		},
		{
			MethodName: "GetCapabilities",
			Handler:    _OCRService_GetCapabilities_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchProcess",
			Handler:       _OCRService_BatchProcess_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream_process.proto",
}

const (
	QueueService_GetQueueStatus_FullMethodName = "/streamprocess.QueueService/GetQueueStatus"
	QueueService_CancelJob_FullMethodName      = "/streamprocess.QueueService/CancelJob"
	QueueService_GetJobStatus_FullMethodName   = "/streamprocess.QueueService/GetJobStatus"
)

// QueueServiceClient is the client API for QueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueServiceClient interface {
	// Get queue status
	GetQueueStatus(ctx context.Context, in *QueueStatusRequest, opts ...grpc.CallOption) (*QueueStatusResponse, error)
	// Cancel a job
	CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobResponse, error)
	// Get job status
	GetJobStatus(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error)
}

type queueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueServiceClient(cc grpc.ClientConnInterface) QueueServiceClient {
	return &queueServiceClient{cc}
}

func (c *queueServiceClient) GetQueueStatus(ctx context.Context, in *QueueStatusRequest, opts ...grpc.CallOption) (*QueueStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueStatusResponse)
	err := c.cc.Invoke(ctx, QueueService_GetQueueStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelJobResponse)
	err := c.cc.Invoke(ctx, QueueService_CancelJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) GetJobStatus(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobStatusResponse)
	err := c.cc.Invoke(ctx, QueueService_GetJobStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueServiceServer is the server API for QueueService service.
// All implementations must embed UnimplementedQueueServiceServer
// for forward compatibility.
type QueueServiceServer interface {
	// Get queue status
	GetQueueStatus(context.Context, *QueueStatusRequest) (*QueueStatusResponse, error)
	// Cancel a job
	CancelJob(context.Context, *CancelJobRequest) (*CancelJobResponse, error)
	// Get job status
	GetJobStatus(context.Context, *JobStatusRequest) (*JobStatusResponse, error)
	mustEmbedUnimplementedQueueServiceServer()
}

// UnimplementedQueueServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueueServiceServer struct{}

func (UnimplementedQueueServiceServer) GetQueueStatus(context.Context, *QueueStatusRequest) (*QueueStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueStatus not implemented")
}
func (UnimplementedQueueServiceServer) CancelJob(context.Context, *CancelJobRequest) (*CancelJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (UnimplementedQueueServiceServer) GetJobStatus(context.Context, *JobStatusRequest) (*JobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatus not implemented")
}
func (UnimplementedQueueServiceServer) mustEmbedUnimplementedQueueServiceServer() {}
func (UnimplementedQueueServiceServer) testEmbeddedByValue()                      {}

// UnsafeQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueServiceServer will
// result in compilation errors.
type UnsafeQueueServiceServer interface {
	mustEmbedUnimplementedQueueServiceServer()
}

func RegisterQueueServiceServer(s grpc.ServiceRegistrar, srv QueueServiceServer) {
	// If the following call pancis, it indicates UnimplementedQueueServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QueueService_ServiceDesc, srv)
}

func _QueueService_GetQueueStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).GetQueueStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_GetQueueStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).GetQueueStatus(ctx, req.(*QueueStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_CancelJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).CancelJob(ctx, req.(*CancelJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).GetJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_GetJobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).GetJobStatus(ctx, req.(*JobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueService_ServiceDesc is the grpc.ServiceDesc for QueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamprocess.QueueService",
	HandlerType: (*QueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQueueStatus",
			Handler:    _QueueService_GetQueueStatus_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _QueueService_CancelJob_Handler,
		},
		{
			MethodName: "GetJobStatus",
			Handler:    _QueueService_GetJobStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stream_process.proto",
}
