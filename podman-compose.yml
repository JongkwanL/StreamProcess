version: '3.8'

# Podman-compose configuration for StreamProcess
# Podman advantages:
# - Daemonless architecture (no root daemon)
# - Rootless containers by default
# - Better security with user namespaces
# - Compatible with Docker CLI commands
# - Built-in support for pods (Kubernetes-like)

services:
  redis:
    image: docker.io/redis:7-alpine
    container_name: streamprocess-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data:Z  # :Z for SELinux context
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    networks:
      - streamprocess-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    userns_mode: keep-id  # Rootless mode
    security_opt:
      - label=disable  # For development, enable in production

  minio:
    image: docker.io/minio/minio:latest
    container_name: streamprocess-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data:Z
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    networks:
      - streamprocess-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    userns_mode: keep-id

  grpc-server:
    build:
      context: .
      dockerfile: Containerfile  # Podman prefers Containerfile
      target: grpc-server
    container_name: streamprocess-grpc
    ports:
      - "50051:50051"
      - "9090:9090"  # Metrics
    environment:
      - REDIS_HOST=redis
      - MINIO_ENDPOINT=minio:9000
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - minio
    networks:
      - streamprocess-network
    volumes:
      - ./models:/app/models:Z
      - ./logs:/app/logs:Z
    restart: unless-stopped
    userns_mode: keep-id
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  rest-api:
    build:
      context: .
      dockerfile: Containerfile
      target: rest-api
    container_name: streamprocess-api
    ports:
      - "8000:8000"
    environment:
      - GRPC_SERVER_HOST=grpc-server
      - REDIS_HOST=redis
      - MINIO_ENDPOINT=minio:9000
    depends_on:
      - grpc-server
    networks:
      - streamprocess-network
    restart: unless-stopped
    userns_mode: keep-id
    cap_drop:
      - ALL

  stt-worker:
    build:
      context: .
      dockerfile: Containerfile
      target: stt-worker
    container_name: streamprocess-stt-worker
    environment:
      - REDIS_HOST=redis
      - MINIO_ENDPOINT=minio:9000
      - WHISPER_MODEL_SIZE=base
      - WHISPER_DEVICE=cpu
      - WORKER_TYPE=stt
    depends_on:
      - redis
      - minio
    networks:
      - streamprocess-network
    volumes:
      - ./models:/app/models:Z,ro  # Read-only for security
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 4G
    restart: unless-stopped
    userns_mode: keep-id
    cap_drop:
      - ALL
    read_only: true  # Read-only root filesystem
    tmpfs:
      - /tmp
      - /app/tmp

  ocr-worker:
    build:
      context: .
      dockerfile: Containerfile
      target: ocr-worker
    container_name: streamprocess-ocr-worker
    environment:
      - REDIS_HOST=redis
      - MINIO_ENDPOINT=minio:9000
      - OCR_USE_GPU=false
      - WORKER_TYPE=ocr
    depends_on:
      - redis
      - minio
    networks:
      - streamprocess-network
    volumes:
      - ./models:/app/models:Z,ro
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 4G
    restart: unless-stopped
    userns_mode: keep-id
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
      - /app/tmp

  prometheus:
    image: docker.io/prom/prometheus:latest
    container_name: streamprocess-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:Z,ro
      - prometheus-data:/prometheus:Z
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - streamprocess-network
    restart: unless-stopped
    userns_mode: keep-id
    cap_drop:
      - ALL

  grafana:
    image: docker.io/grafana/grafana:latest
    container_name: streamprocess-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana:Z
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:Z,ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:Z,ro
    depends_on:
      - prometheus
    networks:
      - streamprocess-network
    restart: unless-stopped
    userns_mode: keep-id
    cap_drop:
      - ALL

networks:
  streamprocess-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  minio-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local